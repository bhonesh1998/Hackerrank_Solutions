import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
class Solution {
    static ArrayList<Integer> p=new ArrayList<Integer>(10000);
    static void sie(int n)
    {
    	
        boolean prime[] = new boolean[n+1];
        for(int i=0;i<n;i++)
            prime[i] = true;
         
        for(int p = 2; p*p <=n; p++)
        {
            if(prime[p] == true)
            {
                for(int i = p*2; i <= n; i += p)
                    prime[i] = false;
            }
        }
      
        for(int i = 2; i <= n; i++)
        {
            if(prime[i] == true)
                p.add(i);
        }
      
    }
    
    
    static long longestSequence(long[] a,long max) {
       
        int n=a.length,i,j;
        long an=0,x,f;
        int c=(int)Math.sqrt(2*max)+1;
        sie(c);
        for(i=0;i<n;i++){
            x=a[i];
            f=a[i];
            for(j=0;f!=1 && j<p.size();j++){
                c=(int)p.get(j);
                while(f%c==0){
                    f/=c;
                    x+=f;
                }
            }
            if(f!=1){
                x++;
            }
            an+=x;
        }
        return an;
   }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        long[] a = new long[n];
        long max;
        a[0] = in.nextLong();
        max=a[0];
        for(int a_i = 1; a_i < n; a_i++){
            a[a_i] = in.nextLong();
            if(max<a[a_i]){
                max=a[a_i];
            }
        }
        long result = longestSequence(a,max);
        System.out.println(result);
        in.close();
    }
}

